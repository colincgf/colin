多线程：
1.一个进程里面包含多个线程。
2.java中实现多线程有两种方式：a.继承Thread类，override方法run();
                              b.实现Runnable接口，并实现方法run();
3.程序一旦启动至少有一线程(main线程)。在一个main方法中调用多个线程时，这几个线程并不是按照顺序执行的。
4.线程的5种状态。1.新建(new),2.就绪（runnable）3,运行（running）,4.阻塞（blocked），5.死亡（dead）。
5.super关键字用于子类调用父类的属性和构造方法。调用父类构造哪个方法取决于super(参数)，参数去匹配。
6.线程join()方法是指，该线程先执行完后，再然其他线程执行。
7.后台线程是为其他线程提供服务的，如果其他线程死亡了，后台线程也随之死亡。setDaemon(true);设置为后台线程。
8.线程静态方法sleep（时间）让线程阻塞 一会再执行。而yield()方法则不会是线程阻塞，只会给线程优先级相同或者优先级更高的线程执行。
9.线程安全：对于多个线程共同读取修改公共资源时，会设计到线程安全问题（银行存取钱），为了保证数据合理性，可以对公共资源加synchronied关键字
  synchronized可以修饰方法，代码块。但是不能修饰构造器，属性。
  释放同步监听器的锁定：a.当前同步方法和同步代码执行结束。b.当在同步代码块，同步方法中遇到break,return终止代码块，该方法执行结束。c当线程在同步代码块或者同步方法中，出现了error或者Exception时 
                        d.当线程在同步代码块或者同步方法，程序执行了同步监视对象的wait()方法。
                        
  但是当线程在同步代码块或者同步方法中调用了sleep，yield方法时不会释放同步监视器。其他线程调用该线程的suspen方法
10.lock同步锁：它是显示通过同步锁来实现同步。
11.死锁（deallock）：两个或者两个以上的线程都在等待对方释放同步监视器就会产生死锁，一旦出现死锁的想象，整个程序不会抛出任何异常，也会给任何提示，无法继续进行。
12.线程通信：线程于线程之间的协调运行。
   1.object下的wait（），notify（），notifyAll（）三个方法。用这三个方法时，synchronized
   2.condition和lock一起用，await(),signalAll();
13.线程组：是把线程归于哪一组。
14.Callable和Future接口 ：Callable与Runnable类似，但是Callable有返回值，显示声明抛出异常。Future的FutureTask实现了Future和Runnable接口，他提供Thread 的target;
15.线程池：和数据库连接池差不多，由于系统启动一个新线程的陈本比较高。在这种情况下，使用线程池可以很好地提高性能      
    使用线程池可以有效地控制系统中并发线程的数量。，当系统中包含大量并发线程时，会导致系统性能下降，甚至jvm崩溃，而线程池的最大线程数参数可以控制系统中并发线程数量不超过此数量。
    Exectors工厂类来产生线程池。newCachedThreadPoll()

16.ThreadLocal没有弄明白
                                                                                                                         